# from random import random
#
# print('hello')
# print(ord('h'))
# print(ord('H'))
#
# a = 'Hello'  # кодировка ASCII
# # Переведём все символы слова в их значения из таблицы кодировки
# chars = []
# for i in a:
#     chars.append(ord(i))
# print(chars)
# print()
#
# # Сделаем перевод в обратную сторону
# s = ''
# for i in chars:
#     s += chr(i)
# print(s)
# print()
#
# # Выведем все символы из таблицы кодировки ASCII (128 символов)
# for i in range(128):
#     print(chr(i))
# print()
#
# # Всё что за пределами 128 символов является кодировкой Unicode — стандарт кодирования символов, включающий в себя знаки почти всех письменных языков мира
# print(ord('ё'))
#
# for i in range(1000, 1200):
#     print(chr(i))
# print()
from encodings.utf_16 import decode

# Интерпретатор работает не с символами, а с байтами (байткодом) в двоичном или шестнадцатеричном формате
# Переведём символ h в шестнадцатеричный формат, предварительно получив его числовое значение:
print(hex(ord('h')))  # 0x68

# Присвоим переменной "bb" с помощью префикса "b" шестнадцатеричное значение переменной (вместо "0" ставим "\")
bb = b'\x68'
print(type(bb))  # посмотрим тип переменной <class 'bytes'>
print(bb.decode())  # выполним декодирование переменной "bb"

'''
Интерпретатору проще работать с байтами
С помощью байтов можно работать/хранить/передавать не только символьные значения, но и аудио, видео, изображения, БД и т.д.
Кодирование и декодирование интерпретатор Python выполняет самостоятельно, но у нас есть возможность делать это вручную.
'''
