# Функции со * в параметрах необходимо использовать когда мы не знаем сколько параметров будет передавать пользователь
def test_func(*params):
    print('Тип:', type(params))
    print('Аргумент:', params)


test_func(1, 2, 3, 4, 5, 6, 7)  # Когда мы передаём параметры в таком виде, то на выходе получаем кортеж
print('-----------------------')


# Пример применения с произвольным количеством параметров
def summator(*values):
    summa = 0
    for i in values:
        summa += i
    return summa


print(summator(1, 2, 3, 4, 5))
print('-----------------------')


# Пример применения произвольного количества параметров в комбинации с одним позиционным параметром
def summator_2(txt, *values):
    summa = 0
    for i in values:
        summa += i
    return f'{txt}{summa}'


print(summator_2('Сумма чисел: ', 1, 2, 3, 4, 5))
print('-----------------------')


# Пример применения произвольного количества параметров в комбинации с одним позиционным параметром и одним со значением по умолчанию
def summator_3(txt, *values, type='sum'):
    summa = 0
    for i in values:
        summa += i
    return f'{txt}{summa} {type}'


print(summator_3('Сумма чисел: ', 1, 2, 3, 4, 5))
print(summator_3('Сумма чисел: ', 1, 2, 3, 4, 5, type='summator'))  # Значение по умолчанию мы можем менять
print('-----------------------')


# Также есть возможность создания функций с произвольным количеством именованных параметров
def info(**values):
    print('Тип:', type(values))
    print('Аргументы:', values)


info()
print('-----------------------')


# Пример применения с произвольным количеством именованных параметров
def info_1(**values):
    print('Тип:', type(values))
    print('Аргументы:', values)
    # Можно перебрать параметры и вывести более читаемый вид
    for key, value in values.items():
        print(key, value)


info_1(name='Денис', course='Python')
print('-----------------------')


# Пример применения произвольного количества именованных параметров с произвольным количеством позиционных параметров
# Позиционные параметры обязательно должны идти перед именованными
def info_2(*types, **values):
    print('Тип:', type(values))
    print('Аргументы:', values)
    # Можно перебрать параметры и вывести более читаемый вид
    for key, value in values.items():
        print(key, value)
    print(types)


info_2(1, 2, 3, 4, 5, name='Денис', course='Python')  # Позиционные параметры в таком случае будут иметь тип кортежа
print('-----------------------')


# Пример применения всех типов параметров, только необходимо соблюдать правило: сначала идут позиционные, потом произвольное количество произвольных позиционных, потом именованные и только потом произвольные именованные
def info_3(value, *types, name_author='Den', **values):
    print(value)
    print(name_author)
    print('Аргументы:', values)
    # Можно перебрать параметры и вывести более читаемый вид
    for key, value in values.items():
        print(key, value)
    print(types)


info_3('Пример использования параметров всех типов:', 1, 2, 3, 4, 5, name='Денис',
       course='Python')  # Позиционные параметры в таком случае будут иметь тип кортежа
print('-----------------------')


# Пример применения
def my_sum(n, *args, txt='Сумма чисел'):
    s = 0
    for i in range(len(args)):
        s += args[i] ** n
    print(txt + ':', s)


my_sum(1, 1, 2, 3, 4, 5)
my_sum(2, 1, 2, 3, 4, 5, txt='Сумма квадратов чисел')
my_sum(3, 1, 2, 3, 4, 5, txt='Сумма кубов чисел')
print('-----------------------')